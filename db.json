{
    
        "posts": [
          {"id":1,
           "title":"C# primeiros passos: Lógica de Programação e Algoritmos",
           "img": "https://miro.medium.com/max/2728/1*7I6oONv2fGLQJcNEFA4QSw.png",
           "body": "O C# (pronuncia-se "Veja nítido") é uma linguagem de programação moderna, orientada a objeto e de tipo seguro. O C# permite que os desenvolvedores criem muitos tipos de aplicativos seguros e robustos que são executados no ecossistema do .NET. O C# tem suas raízes na família de linguagens C e os programadores em C, C++, Java e JavaScript a reconhecerão imediatamente. Este tour fornece uma visão geral dos principais componentes do idioma no C# 8 e versões anteriores. Se você quiser explorar a linguagem por meio de exemplos interativos, experimente a introdução aos tutoriais do C#.
O C# é uma linguagem de programação orientada a objetos e orientada a componentes. O c# fornece construções de linguagem para dar suporte direto a esses conceitos, tornando o C# uma linguagem natural para criar e usar componentes de software. Desde sua origem, o C# adicionou recursos para dar suporte a novas cargas de trabalho e práticas de design de software emergentes.
Vários recursos do C# ajudam a criar aplicativos robustos e duráveis. A * coleta de lixo _ recupera automaticamente a memória ocupada por objetos não utilizados inacessíveis. Os tipos anuláveis protegem contra variáveis que não se referem a objetos alocados. A manipulação de exceção fornece uma abordagem estruturada e extensível para detecção e recuperação de erros. As expressões lambda dão suporte a técnicas de programação funcional. A sintaxe de linguagem de consulta integrada (LINQ) cria um padrão comum para trabalhar com dados de qualquer fonte. O suporte a idiomas para operações assíncronas fornece a sintaxe para a criação de sistemas distribuídos. O C# tem um sistema * de tipo _ unificado. Todos os tipos do C#, incluindo tipos primitivos, como int e double, herdam de um único tipo de object raiz. Todos os tipos compartilham um conjunto de operações comuns. Os valores de qualquer tipo podem ser armazenados, transportados e operados de maneira consistente. Além disso, o C# dá suporte a tipos de referência definidos pelo usuário e tipos de valor. O C# permite a alocação dinâmica de objetos e o armazenamento em linha de estruturas leves. O C# oferece suporte a tipos e métodos genéricos, que fornecem aumento na segurança e no desempenho do tipo. O C# fornece iteradores, que habilitam implementadores de classes de coleção para definir comportamentos personalizados para o código do cliente.
O C# enfatiza o controle de versão para garantir que programas e bibliotecas possam evoluir ao longo do tempo de maneira compatível. Aspectos do design do C# que foram influenciados diretamente pelas considerações de controle de versão incluem os virtual override modificadores and separados, as regras para resolução de sobrecarga de método e suporte para declarações de membro de interface explícitas."
           },
          {"id": 2,
            "title":"Curso Completo do Desenvolvedor NodeJS e MongoDB",
            "img":"https://miro.medium.com/max/930/0*MNVJq_8e0SJoqZb5.jpg"
          },
          {"id": 3,
            "title":"Java primeiros passos: Lógica de Programação e Algoritmos",
            "img":"https://s2.glbimg.com/5pgaEIiZXIVWgSTOtfKBtm5AHaU=/695x393/s2.glbimg.com/vME2Bq4OSpm6f6IE16BhcVLR98U=/695x0/s.glbimg.com/po/tt2/f/original/2014/11/14/java-logo.jpg"
          },
          {"id": 4,
            "title":"Curso React.js Ninja - React Completo",
            "img":"https://blog.fcamara.com.br/wp-content/uploads/2019/03/1_y6C4nSvy2Woe0m7bWEn4BA.png"
          },
          {"id": 5,
            "title":"Curso Vue JS 2 - O Guia Completo (incl. Vue Router & Vuex)",
            "img":"https://miro.medium.com/max/2625/1*XH9l-6x9SUlmGxPlZFaoIA.jpeg"
          },
          {"id": 6,
            "title":"Angular 7/8 - Material Design + Node.js + MongoDB + Firebase",
            "img":"https://miro.medium.com/max/2000/1*_UY7U-Umohxg-88is_e3mQ.png"
          },
          {"id": 7,
            "title":".NETCore 3.1/.NET5.0 - C# API com Arquitetura DDD na PRÁTICA",
            "img":"https://miro.medium.com/max/750/1*zc1BKfAHkpvrZlHPbUvuYA.png"
          },
          {"id": 8,
            "title":"Programação em Python do básico ao avançado",
            "img":"https://cadernodelaboratorio.com.br/wp-content/uploads/2018/07/python37.png"
         }
        ],
        "comments": [
          {"id": 1,
            "body": "Seu pagamento leva até 72 horas para ser processado"
          },
          {"id": 2,
            "body": "Seu pagamento leva até 72 horas para ser processado"
          },
          {"id": 3,
            "body": "Seu pagamento leva até 72 horas para ser processado"
          }
        ]
      
    
}
